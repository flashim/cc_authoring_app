{"version":3,"sources":["constants/AppStates.js","util/Utils.js","actions/AppActions.js","constants/ErrorMsg.js","constants/GameConst.js","store/AppStore.js","components/DefaultView.js","components/EditQuestionView.js","components/ErrorView.js","App.js","serviceWorker.js","index.js"],"names":["AppStates","EDIT_TITLE","EDIT_QUESTION","DEFAULT","ArrayUtil","array","Set","size","length","element","index","indexOf","splice","Reflux","require","XMLWriter","Action","createActions","ChangeComp","Validation","ErrorMsg","GAME_TITLE","GAME_DESC","QUESTION","OPTION_MIN","OPTION_CORRECT","OPTION_DIFF","DELETE_QUESTION","UNSAVED_QUESTION","UNEDITED_QUESTION","PUBLISH_QUESTION","PUBLISH_GAME","DRAFT_GAME","GameConst","OPTIONS_REQUIRED","QUESTIONS_REQUIRED","AppStore","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editGame","compState","qIndex","qBank","qArr","fields","skill","gTitle","gDesc","qData","error","theme","show","msg","ok","okFunc","cancel","cancelFunc","listenables","formName","formIsValid","fieldName","showError","qtag","_qbank","hasAnswer","optArr","options","forEach","opt","id","txt","push","correctans","hasDuplicates","param","isQuestionValid","isOptionsValid","_qtag","unescape","q","createQuestionObject","setState","_msg","arguments","undefined","_okFunc","_cancel","_cancelFunc","_theme","pop","fileName","xmlstr","file","Blob","type","link","document","createElement","href","URL","createObjectURL","download","window","open","click","e","preventDefault","isFormValid","addBlankQuestionToBank","stateTo","isQuestionSetValid","setErrorObject","new_state","assign","removeAtIndex","onCloseError","_this2","xw","startDocument","startElement","writeAttribute","text","endElement","writeCData","el","endDocument","saveXMLFile","toString","err","value","key","escape","split","Store","DefaultView","props","store","field","changeField","target","changeBulkQuestionField","react_default","a","className","refs","onChange","handleChange","bind","rows","cols","map","idx","name","handleBulkQuestionChange","onClick","proceed","Component","EditQuestionView","changeQuestionField","changeOptionField","changeOptionCorrect","editTitle","handleQuestionChange","handleSkillChange","checked","handleRadioChange","disabled","handleOptionTextChange","prev","next","deleteQuestion","draft","save","ErrorView","okClick","cancelClick","App","comp","components_DefaultView","components_EditQuestionView","getComponent","components_ErrorView","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAQeA,EARC,CAEZC,WAAY,aACZC,cAAe,gBACfC,QAAS,WCHPC,6GACmBC,GACjB,OAAQ,IAAIC,IAAID,GAAQE,OAASF,EAAMG,sCAG7BH,EAAOI,GACjB,IAAMC,EAAQL,EAAMM,QAAQF,GAC5BJ,EAAMO,OAAOF,EAAO,yCAGHL,EAAOK,GACxBL,EAAMO,OAAOF,EAAO,YAKxBG,EAASC,EAAQ,IACjBC,EAAYD,EAAQ,ICfpBE,GDgBKF,EAAQ,IChBJD,EAAOI,cAAc,CAC9B,UACA,YAAa,qBACb,OAAQ,OAAQ,gBAChB,iBAAkB,0BAClB,QAAS,eACT,OAAQ,UACR,gBAEAC,EAAaL,EAAOI,cAAc,CAAC,YACnCE,EAAaN,EAAOI,cAAc,CAAC,QAAS,cAChD,0BAA2B,sBAAuB,mBAAoB,oBAAqB,wBCW5EG,EAzBA,CAEXC,WAAY,4BACZC,UAAW,gCAEXC,SAAU,0BAEVC,WAAY,iCACZC,eAAgB,sDAChBC,YAAa,kCAEbC,gBAAiB,mCAEjBC,iBAAkB,kDAElBC,kBAAmB,4EAEnBC,iBAAkB,gGAElBC,aAAc,+BAEdC,WAAY,2CChBDC,EALC,CACZC,iBAAkB,EAClBC,mBAAoB,IC2bTC,cAtbX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAETC,UAAU,EACVC,UAAW9C,EAAUG,QAErB4C,OAAQ,EACRC,MAAO,GACPC,KAAM,CAAC,IAEPC,OAAQ,CACJC,MAAS,GACTC,OAAU,GACVC,MAAS,8WACTC,MAAS,IAEbC,MAAO,CACHC,MAAS,mBACTC,MAAQ,EACRC,IAAO,GACPC,IAAM,EACNC,OAAU,GACVC,QAAU,EACVC,WAAc,KAGtBzB,EAAK0B,YAAc,CAAC/C,EAAQE,EAAYC,GA3B9BkB,2EA+BF2B,GACR,IAAIC,GAAc,EAClB,GAAoC,KAAhCzB,KAAKI,MAAMM,OAAOc,GAAkB,CACpCC,GAAc,EACd,IAAIC,EAA0B,WAAbF,EAAyB5C,EAASC,WAAaD,EAASE,UACzEH,EAAWoC,MAAMW,GAErB,OAAOD,0CAGKE,GACZ,IAAIF,GAAc,EAOlB,MANiD,KAA7CzB,KAAKI,MAAMI,MAAMR,KAAKI,MAAMG,QAAQqB,OACpCH,GAAc,EACVE,GACAhD,EAAWoC,MAAMnC,EAASG,WAG3B0C,yCAGIE,GACX,IAAIF,GAAc,EAEdI,EAAS7B,KAAKI,MAAMI,MACpBsB,GAAY,EACZC,EAAS,GAWb,OATAF,EAAO7B,KAAKI,MAAMG,QAAQyB,QAAQC,QAAQ,SAACC,EAAKC,GAC5B,KAAZD,EAAIE,KACJL,EAAOM,KAAKH,EAAIE,KAEhBF,EAAII,aACJR,GAAY,KAIhBC,EAAO/D,OAASyB,EAAUC,kBAC1B+B,GAAc,EACVE,GACAhD,EAAWoC,MAAMnC,EAASI,YAEvByC,GAGNK,EAQDlE,EAAU2E,cAAcR,IACxBN,GAAc,EACVE,GACAhD,EAAWoC,MAAMnC,EAASM,aAEvBuC,GAGJA,GAfHA,GAAc,EACVE,GACAhD,EAAWoC,MAAMnC,EAASK,gBAAkBe,KAAKI,MAAMG,OAAS,IAE7DkB,8CAcIe,GACf,OAAQxC,KAAKyC,gBAAgBD,IAAUxC,KAAK0C,eAAeF,kDAO3D,IAAIG,EAAS3C,KAAKI,MAAMG,OAASP,KAAKI,MAAMK,KAAKzC,OAAUgC,KAAKI,MAAMK,KAAKT,KAAKI,MAAMG,QAAU,GAEhG,MAAO,CACHqB,KAAQgB,SAASD,GACjBX,QAAW,CACP,CACII,IAAO,GACPE,YAAc,GACf,CACCF,IAAO,GACPE,YAAc,GACf,CACCF,IAAO,GACPE,YAAc,GACf,CACCF,IAAO,GACPE,YAAc,sDAO1B,IAAIO,EAAI7C,KAAKI,MAAMI,MACnBqC,EAAER,KAAKrC,KAAK8C,wBACZ9C,KAAK+C,SAAS,CAAEvC,MAAOqC,6CAGuF,IAAnGG,EAAmGC,UAAAjF,OAAA,QAAAkF,IAAAD,UAAA,GAAAA,UAAA,GAA5F,GAAIE,EAAwFF,UAAAjF,OAAA,QAAAkF,IAAAD,UAAA,GAAAA,UAAA,GAA9E,aAAcG,EAAgEH,UAAAjF,OAAA,QAAAkF,IAAAD,UAAA,IAAAA,UAAA,GAA/CI,EAA+CJ,UAAAjF,OAAA,QAAAkF,IAAAD,UAAA,GAAAA,UAAA,GAAjC,GAAIK,EAA6BL,UAAAjF,OAAA,QAAAkF,IAAAD,UAAA,GAAAA,UAAA,GAApB,mBAC1FjD,KAAK+C,SAAS,CACVhC,MAAO,CACHC,MAASsC,EACTrC,MAAQ,EACRC,IAAO8B,EACP7B,IAAM,EACNC,OAAU+B,EACV9B,OAAU+B,EACV9B,WAAc+B,qDAMtB,IAAIR,EAAI7C,KAAKI,MAAMI,MACnBqC,EAAEU,MACFvD,KAAK+C,SAAS,CAAEvC,MAAOqC,wCAGfW,EAAUC,GAClB,IAAIC,EAAO,IAAIC,KAAK,CAACF,GAAS,CAC1BG,KAAM,aAGNC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,KAAOC,IAAIC,gBAAgBR,GAChCG,EAAKM,SAAWX,EAIhBY,OAAOC,KAAKR,GACZA,EAAKS,0CAKCC,GAENA,EAAEC,iBAEExE,KAAKyE,YAAY,WAAazE,KAAKyE,YAAY,WACd,IAA5BzE,KAAKI,MAAMI,MAAMxC,aAA0CkF,IAAxBlD,KAAKI,MAAMI,MAAM,KACrDR,KAAK+C,SAAS,CAAE1C,UAAU,IAC1BL,KAAK0E,0BAEThG,EAAWiG,QAAQnH,EAAUE,sDAK5BsC,KAAK4E,oBAAmB,IAAkC,IAAtB5E,KAAKI,MAAMG,OAKpD7B,EAAWiG,QAAQnH,EAAUC,YAHzBuC,KAAK6E,eAAejG,EAASQ,mGAuB5BY,KAAK4E,oBAAmB,GAK7B5E,KAAK+C,SAAS,CACVxC,SAAUP,KAAKI,MAAMG,SALrBP,KAAK6E,eAAejG,EAASQ,8FAmB7BY,KAAK4E,oBAAmB,KACxB5E,KAAK+C,SAAS,CACVxC,SAAUP,KAAKI,MAAMG,SAErBP,KAAKI,MAAMG,SAAWP,KAAKI,MAAMI,MAAMxC,QACvCgC,KAAK0E,qEAMb1E,KAAK6E,eAAejG,EAASO,gBAAiB,2BAA2B,EAAM,kEAI/E,IAAI2F,EAAYhF,OAAOiF,OAAO,GAAI/E,KAAKI,OACvCxC,EAAUoH,cAAcF,EAAUtE,MAAOsE,EAAUvE,QAC1B,IAArBuE,EAAUvE,QACVuE,EAAUvE,SAEdP,KAAK+C,SAAS+B,GACd9E,KAAKiF,iDAILjF,KAAK6E,eAAejG,EAASY,WAAY,gBAAgB,EAAM,aAAc,4DAI7EQ,KAAKiF,gDAQL,GADSjF,KAAK4E,oBAAmB,GACzB,CAEJ,GAAI5E,KAAKI,MAAMI,MAAMxC,OAASgC,KAAKI,MAAMK,KAAKzC,OAE1C,YADAgC,KAAK6E,eAAejG,EAASS,mBAIjC,GAAIW,KAAKI,MAAMI,MAAMxC,OAASyB,EAAUE,mBAEpC,YADAK,KAAK6E,eAAejG,EAASU,kBAGjCU,KAAK6E,eAAejG,EAASW,aAAc,WAAW,EAAM,aAAc,wDAItE,IAAA2F,EAAAlF,KAERA,KAAKiF,eAEL,IAAIE,EAAK,IAAI5G,EAEb4G,EAAGC,gBAGHD,EAAGE,aAAa,eAChBF,EAAGG,eAAe,KAAM,6CACxBH,EAAGG,eAAe,iBAAkB,eACpCH,EAAGG,eAAe,SAAU,SAG5BH,EAAGE,aAAa,YAEhBF,EAAGE,aAAa,YAChBF,EAAGI,KAAK,0HACRJ,EAAGK,aAGHL,EAAGE,aAAa,SAChBF,EAAGI,KAAKvF,KAAKI,MAAMM,OAAOE,QAC1BuE,EAAGK,aAGHL,EAAGE,aAAa,eAChBF,EAAGI,KAAK,wBACRJ,EAAGK,aAEHL,EAAGE,aAAa,YAChBF,EAAGI,KAAK,WACRJ,EAAGK,aAEHL,EAAGE,aAAa,aAChBF,EAAGG,eAAe,WAAY,QAC9BH,EAAGG,eAAe,YAAa,QAC/BH,EAAGG,eAAe,WAAY,SAC9BH,EAAGG,eAAe,iBAAkB,SACpCH,EAAGK,aAGHL,EAAGE,aAAa,aAChBF,EAAGE,aAAa,QAChBF,EAAGG,eAAe,MAAO,KACzBH,EAAGK,aACHL,EAAGK,aACHL,EAAGK,aAIHL,EAAGE,aAAa,YAChBF,EAAGE,aAAa,YAChBF,EAAGE,aAAa,kBAChBF,EAAGM,WAAWzF,KAAKI,MAAMM,OAAOG,OAChCsE,EAAGK,aAEHL,EAAGE,aAAa,QAChBF,EAAGG,eAAe,WAAY,KAC9BH,EAAGG,eAAe,YAAa,cAC/BH,EAAGE,aAAa,oBAChBF,EAAGK,aAGHL,EAAGE,aAAa,aAIhBrF,KAAKI,MAAMI,MAAMyB,QAAQ,SAACyD,EAAIvD,GAC1BgD,EAAGE,aAAa,YAChBF,EAAGG,eAAe,QAASJ,EAAK9E,MAAMM,OAAOC,OAG7CwE,EAAGE,aAAa,QAChBF,EAAGM,WAAWC,EAAG9D,MACjBuD,EAAGK,aAIHE,EAAG1D,QAAQC,QAAQ,SAACC,GAEA,KAAZA,EAAIE,MACJ+C,EAAGE,aAAa,UACZnD,EAAII,YACJ6C,EAAGG,eAAe,aAAc,QAEpCH,EAAGM,WAAWvD,EAAIE,KAClB+C,EAAGK,gBAIXL,EAAGK,eAKPL,EAAGK,aAEHL,EAAGQ,cAEH3F,KAAK4F,YAAY,uBAAwBT,EAAGU,mDAK5C,IAAIC,EAAM9F,KAAKI,MAAMW,MACrB+E,EAAG,MAAW,EACd9F,KAAK+C,SAAS+C,mCAGVC,GACJ/F,KAAK6E,eAAekB,qCAGdA,GACN/F,KAAK+C,SAAS,CAAEzC,UAAWyF,0CAGjBC,EAAKD,GACf,IAAIrF,EAASV,KAAKI,MAAMM,OACxBA,EAAOsF,GAAOD,EACd/F,KAAK+C,SAASrC,qDAGQsF,EAAKD,GAC3B,IAAIjB,EAAYhF,OAAOiF,OAAO,GAAI/E,KAAKI,OACvC0E,EAAUpE,OAASV,KAAKI,MAAMM,OAC9BoE,EAAUpE,OAAOsF,GAAOD,EACxBjB,EAAUrE,KAAOwF,OAAOjG,KAAKI,MAAMM,OAAOI,OAAOoF,MAAM,OACvDlG,KAAK+C,SAAS+B,iDAIIiB,GAClB,IAAIlE,EAAS7B,KAAKI,MAAMI,MACxBqB,EAAO7B,KAAKI,MAAMG,QAAQqB,KAAOmE,EACjC/F,KAAK+C,SAASlB,+CAGE3D,EAAO6H,GACvB,IAAIlE,EAAS7B,KAAKI,MAAMI,MACxBqB,EAAO7B,KAAKI,MAAMG,QAAQyB,QAAQ9D,GAAOkE,IAAM2D,EAC/C/F,KAAK+C,SAASlB,iDAGI3D,GAClB,IAAI2D,EAAS7B,KAAKI,MAAMI,MACxBqB,EAAO7B,KAAKI,MAAMG,QAAQyB,QAAQC,QAAQ,SAACC,EAAKC,GAC5CD,EAAII,WAAcH,IAAOjE,IAE7B8B,KAAK+C,SAASlB,UA/aCxD,EAAO8H,OCgFfC,cA9EX,SAAAA,EAAYC,GAAO,IAAAxG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoG,IACfvG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsG,GAAAjG,KAAAH,KAAMqG,KACDC,MAAQ1G,EAFEC,4EAKN0G,EAAOhC,GAChB5F,EAAW6H,YAAYD,EAAOhC,EAAEkC,OAAOV,wDAGlBQ,EAAOhC,GAC5B5F,EAAW+H,wBAAwBH,EAAOhC,EAAEkC,OAAOV,wCAInD,OAEIY,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,YAAY1E,GAAG,WAC1BwE,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,aACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,cACXF,EAAAC,EAAA7C,cAAA,iDAEJ4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,iBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,cACXF,EAAAC,EAAA7C,cAAA,wBACA4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,kBAAf,cACAF,EAAAC,EAAA7C,cAAA,SAAO+C,KAAK,SAASlD,KAAK,OACtBmD,SAAU/G,KAAKgH,aAAaC,KAAKjH,KAAM,UACvC+F,MAAO/F,KAAKI,MAAMM,OAAX,UAEfiG,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,YACXF,EAAAC,EAAA7C,cAAA,8BACA4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,kBAAf,cACAF,EAAAC,EAAA7C,cAAA,YAAU+C,KAAK,QAAQlD,KAAK,OACxBmD,SAAU/G,KAAKgH,aAAaC,KAAKjH,KAAM,SACvC+F,MAAO/F,KAAKI,MAAMM,OAAX,MACPwG,KAAK,IAAIC,KAAK,QAItBR,EAAAC,EAAA7C,cAAA,OAAK8C,UAAY7G,KAAKI,MAAMC,SAAY,OAAS,iBAC7CsG,EAAAC,EAAA7C,cAAA,qDACA4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,kBAAf,cAEAF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,iBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,eACXF,EAAAC,EAAA7C,cAAA,UACK/D,KAAKI,MAAMK,KAAK2G,IAAI,SAAClF,EAAKmF,GAAN,OACjBV,EAAAC,EAAA7C,cAAA,MAAIiC,IAAKqB,QAKrBV,EAAAC,EAAA7C,cAAA,YAAUH,KAAK,OAAO0D,KAAK,UACvBP,SAAU/G,KAAKuH,yBAAyBN,KAAKjH,KAAM,SACnD+F,MAAO/F,KAAKI,MAAMM,OAAX,MACPwG,KAAK,IAAIC,KAAK,SAItBR,EAAAC,EAAA7C,cAAA,+HAMR4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,UACXF,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,MAAMW,QAAS,SAACjD,GAAQ/F,EAAOiJ,QAAQlD,KAAzD,4BApEElG,EAAOqJ,WC4GlBC,cA1GX,SAAAA,EAAYtB,GAAO,IAAAxG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2H,IACf9H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6H,GAAAxH,KAAAH,KAAMqG,KACDC,MAAQ1G,EAFEC,oFAKE0E,GACjB5F,EAAWiJ,oBAAoBrD,EAAEkC,OAAOV,iDAG1BQ,EAAOhC,GACrB5F,EAAW6H,YAAYD,EAAOhC,EAAEkC,OAAOV,sDAGpB5D,EAAIoC,GACvB5F,EAAWkJ,kBAAkB1F,EAAIoC,EAAEkC,OAAOV,iDAG5B5D,GACdxD,EAAWmJ,oBAAoB3F,oCAG1B,IAAA+C,EAAAlF,KACL,OAEI2G,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,YAAY1E,GAAG,gBAC1BwE,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,qBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,cACXF,EAAAC,EAAA7C,cAAA,gDACA4C,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,MAAMW,QAAS,WAAQhJ,EAAOuJ,cAAhD,6BAIJpB,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,WACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,uBACXF,EAAAC,EAAA7C,cAAA,6BAAqB/D,KAAKI,MAAMG,OAAS,IAE7CoG,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,yBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,cACXF,EAAAC,EAAA7C,cAAA,2BACA4C,EAAAC,EAAA7C,cAAA,SAAOH,KAAK,OAAOmD,SAAU/G,KAAKgI,qBAAqBf,KAAKjH,MACxD+F,MAAO/F,KAAKI,MAAMI,MAAMR,KAAKI,MAAMG,QAAQqB,QAEnD+E,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,YACXF,EAAAC,EAAA7C,cAAA,qCACA4C,EAAAC,EAAA7C,cAAA,SAAOH,KAAK,OACRmC,MAAO/F,KAAKI,MAAMM,OAAOC,MACzBoG,SAAU/G,KAAKiI,kBAAkBhB,KAAKjH,KAAM,YAEpD2G,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,iBACXF,EAAAC,EAAA7C,cAAA,4BACA4C,EAAAC,EAAA7C,cAAA,iFAAwE4C,EAAAC,EAAA7C,cAAA,SAAOH,KAAK,UAApF,iBAGJ+C,EAAAC,EAAA7C,cAAA,YACI4C,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,iBACXF,EAAAC,EAAA7C,cAAA,UACK/D,KAAKI,MAAMI,MAAMR,KAAKI,MAAMG,QAAQyB,QAAQoF,IAAI,SAAClF,EAAKmF,GAAN,OAC7CV,EAAAC,EAAA7C,cAAA,OAAKiC,IAAKqB,GACNV,EAAAC,EAAA7C,cAAA,SAAOH,KAAK,QACRsE,QAAShG,EAAII,WACbyE,SAAU7B,EAAKiD,kBAAkBlB,KAAK/B,EAAMmC,GAC5Ce,SAAuB,KAAZlG,EAAIE,MACnBuE,EAAAC,EAAA7C,cAAA,SAAOH,KAAK,OACRmC,MAAO7D,EAAIE,IACX2E,SAAU7B,EAAKmD,uBAAuBpB,KAAK/B,EAAMmC,aASjFV,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,kBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,WACXF,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAkC,IAAtB7G,KAAKI,MAAMG,OAAgB,WAAa,MACxDiH,QAAS,WAAkC,IAAtBtC,EAAK9E,MAAMG,QAAc/B,EAAO8J,SADzD,4BADJ,WAKI3B,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,MAAMW,QAAS,WAAQhJ,EAAO+J,SAAhD,yBAKJ5B,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,gBACXF,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAY7G,KAAKI,MAAMI,MAAMxC,OAAS,EAAK,MAAQ,OACvDwJ,QAAS,WAAQhJ,EAAOgK,mBAD5B,wBADJ,WAMI7B,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,MAAMW,QAAS,WAAQhJ,EAAOiK,UAAhD,iBANJ,WASI9B,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,MAAMW,QAAS,WAAQhJ,EAAOkK,SAAhD,mBA/FGrK,EAAOqJ,WC0CvBiB,cAzCX,SAAAA,EAAYtC,GAAO,IAAAxG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2I,IACf9I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6I,GAAAxI,KAAAH,KAAMqG,KACDC,MAAQ1G,EAFEC,uEAKX0E,GAEJ/F,EAAOwB,KAAKI,MAAMW,MAAMK,8CAGhBmD,GAER/F,EAAOwB,KAAKI,MAAMW,MAAMO,+CAIxB,OAAItB,KAAKI,MAAMW,MAAME,KAEb0F,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,gBACXF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAW7G,KAAKI,MAAMW,MAAMC,OAC7B2F,EAAAC,EAAA7C,cAAA,UAAK/D,KAAKI,MAAMW,MAAMG,KACtByF,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,cACXF,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAU,QAAQW,QAASxH,KAAK4I,QAAQ3B,KAAKjH,OAArD,MAGA2G,EAAAC,EAAA7C,cAAA,UAAQ8C,UAAY7G,KAAKI,MAAMW,MAAMM,OAAU,YAAc,OACzDmG,QAASxH,KAAK6I,YAAY5B,KAAKjH,OADnC,aAUT,YArCK3B,EAAOqJ,WC2ChBoB,cAnCb,SAAAA,EAAYzC,GAAO,IAAAxG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8I,IACjBjJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgJ,GAAA3I,KAAAH,KAAMqG,KACDC,MAAQ1G,EAFIC,8EAOjB,IAAIkJ,EAEJ,OAAQ/I,KAAKI,MAAME,WACjB,KAAK9C,EAAUC,WACbsL,EAAOpC,EAAAC,EAAA7C,cAACiF,EAAD,MACP,MAEF,KAAKxL,EAAUE,cACbqL,EAAOpC,EAAAC,EAAA7C,cAACkF,EAAD,MACP,MAEF,QACEF,EAAOpC,EAAAC,EAAA7C,cAACiF,EAAD,MAEX,OAAOD,mCAIP,OACEpC,EAAAC,EAAA7C,cAAA,OAAK8C,UAAU,OAEbF,EAAAC,EAAA7C,cAAA,WAAM/D,KAAKkJ,gBACXvC,EAAAC,EAAA7C,cAACoF,EAAD,cAjCK7K,EAAQ,IAEIoJ,WCCL0B,QACW,cAA7BhF,OAAOiF,SAASC,UAEe,UAA7BlF,OAAOiF,SAASC,UAEhBlF,OAAOiF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAA7C,cAAC2F,EAAD,MAAS5F,SAAS6F,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0703af9e.chunk.js","sourcesContent":["var AppStates = {\r\n\r\n    EDIT_TITLE: 'EDIT_TITLE',\r\n    EDIT_QUESTION: 'EDIT_QUESTION',\r\n    DEFAULT: 'DEFAULT'\r\n\r\n};\r\n\r\nexport default AppStates","\r\nclass ArrayUtil {\r\n    static hasDuplicates(array) {\r\n        return (new Set(array)).size !== array.length;\r\n    }\r\n\r\n    static remove(array, element) {\r\n        const index = array.indexOf(element);\r\n        array.splice(index, 1);\r\n    }\r\n\r\n    static removeAtIndex(array, index) {\r\n        array.splice(index, 1);\r\n    }\r\n\r\n}\r\n\r\nvar Reflux = require('reflux');\r\nvar XMLWriter = require('xml-writer');\r\nvar fs = require('file-system');\r\n\r\n\r\nexport { ArrayUtil, Reflux, XMLWriter, fs }","import { Reflux } from \"../util/Utils\";\r\n\r\n//var action = Reflux.createAction();\r\nvar Action = Reflux.createActions([\r\n    'proceed',\r\n    'editTitle', 'confirmedEditTitle',\r\n    'prev', 'next', 'confirmedPrev',\r\n    'deleteQuestion', 'confirmedDeleteQuestion',\r\n    'draft', 'confirmDraft',\r\n    'save', 'publish',\r\n    'closeError']);\r\n\r\nvar ChangeComp = Reflux.createActions(['stateTo']);\r\nvar Validation = Reflux.createActions(['error', 'changeField',\r\n'changeBulkQuestionField', 'changeQuestionField', 'changeSkillField', 'changeOptionField', 'changeOptionCorrect']);\r\n\r\nexport { Action, ChangeComp, Validation }\r\n\r\n//ChangeComp.stateTo(ComponentStates.EDIT_TITLE);\r\n// Reflux.GlobalState.qBank","var ErrorMsg = {\r\n\r\n    GAME_TITLE: 'Please enter a game title',\r\n    GAME_DESC: 'Please enter game description',\r\n\r\n    QUESTION: 'Please enter a question',\r\n\r\n    OPTION_MIN: 'Please enter minimum 2 options',\r\n    OPTION_CORRECT: 'Please select 1 correct option for question number ',\r\n    OPTION_DIFF: 'Please write different options.',\r\n\r\n    DELETE_QUESTION: 'Click ok to delete this question',\r\n\r\n    UNSAVED_QUESTION: 'Complete you unsaved question before proceeding',\r\n\r\n    UNEDITED_QUESTION: 'You have some un-edited question. Please complete them before publishing.',\r\n\r\n    PUBLISH_QUESTION: 'To publish this game, you require to have 24 questions (2 teams x 2 innings x 1 over/innings)',\r\n\r\n    PUBLISH_GAME: 'Do you want to publish game?',\r\n\r\n    DRAFT_GAME: 'Click ok to save the game in draft mode'\r\n\r\n};\r\n\r\nexport default ErrorMsg","var GameConst = {\r\n    OPTIONS_REQUIRED: 2,\r\n    QUESTIONS_REQUIRED: 24\r\n};\r\n\r\nexport default GameConst","import { Action, ChangeComp, Validation } from \"../actions/AppActions\";\r\nimport AppStates from \"../constants/AppStates\";\r\nimport ErrorMsg from \"../constants/ErrorMsg\";\r\nimport GameConst from \"../constants/GameConst\";\r\nimport { ArrayUtil, Reflux, XMLWriter } from \"../util/Utils\";\r\n\r\nclass AppStore extends Reflux.Store {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\r\n            editGame: false,\r\n            compState: AppStates.DEFAULT,\r\n\r\n            qIndex: 0,\r\n            qBank: [],\r\n            qArr: [''],\r\n\r\n            fields: {\r\n                \"skill\": \"\",\r\n                \"gTitle\": \"\",\r\n                \"gDesc\": \"Score the maximum number of runs as quickly as you can to win the cricket championship! You need to play two innings. Simply choose the correct option from the ones given and click Strike. For a correct response, you score runs. The faster you respond, the more runs you score. For an incorrect response, you lose a wicket. Are you a cricket star? Let's find out!\",\r\n                \"qData\": \"\"\r\n            },\r\n            error: {\r\n                \"theme\": \"popup-box-orange\",\r\n                \"show\": false,\r\n                \"msg\": \"\",\r\n                \"ok\": true,\r\n                \"okFunc\": \"\",\r\n                \"cancel\": false,\r\n                \"cancelFunc\": \"\"\r\n            }\r\n        };\r\n        this.listenables = [Action, ChangeComp, Validation];\r\n    }\r\n\r\n    //.. Validations--------------------------------------------------------------------------\r\n    isFormValid(formName) {\r\n        let formIsValid = true;\r\n        if (this.state.fields[formName] === \"\") {\r\n            formIsValid = false;\r\n            let fieldName = (formName === \"gTitle\") ? ErrorMsg.GAME_TITLE : ErrorMsg.GAME_DESC;\r\n            Validation.error(fieldName);\r\n        }\r\n        return formIsValid\r\n    }\r\n\r\n    isQuestionValid(showError) {\r\n        let formIsValid = true;\r\n        if (this.state.qBank[this.state.qIndex].qtag === \"\") {\r\n            formIsValid = false;\r\n            if (showError) {\r\n                Validation.error(ErrorMsg.QUESTION);\r\n            }\r\n        }\r\n        return formIsValid\r\n    }\r\n\r\n    isOptionsValid(showError) {\r\n        let formIsValid = true;\r\n\r\n        let _qbank = this.state.qBank;\r\n        let hasAnswer = false;\r\n        let optArr = [];\r\n\r\n        _qbank[this.state.qIndex].options.forEach((opt, id) => {\r\n            if (opt.txt !== \"\") {\r\n                optArr.push(opt.txt);\r\n            }\r\n            if (opt.correctans) {\r\n                hasAnswer = true;\r\n            }\r\n        });\r\n\r\n        if (optArr.length < GameConst.OPTIONS_REQUIRED) {\r\n            formIsValid = false;\r\n            if (showError) {\r\n                Validation.error(ErrorMsg.OPTION_MIN);\r\n            }\r\n            return formIsValid\r\n        }\r\n\r\n        if (!hasAnswer) {\r\n            formIsValid = false;\r\n            if (showError) {\r\n                Validation.error(ErrorMsg.OPTION_CORRECT + (this.state.qIndex + 1));\r\n            }\r\n            return formIsValid\r\n        }\r\n\r\n        if (ArrayUtil.hasDuplicates(optArr)) {\r\n            formIsValid = false;\r\n            if (showError) {\r\n                Validation.error(ErrorMsg.OPTION_DIFF);\r\n            }\r\n            return formIsValid\r\n        }\r\n\r\n        return formIsValid\r\n    }\r\n\r\n    isQuestionSetValid(param) {\r\n        return (this.isQuestionValid(param) && this.isOptionsValid(param))\r\n    }\r\n    //.. Validations ends ---------------------------------------------------------------------\r\n\r\n    //.. create question object\r\n    createQuestionObject() {\r\n\r\n        let _qtag = (this.state.qIndex < this.state.qArr.length) ? this.state.qArr[this.state.qIndex] : \"\";\r\n\r\n        return {\r\n            \"qtag\": unescape(_qtag),\r\n            \"options\": [\r\n                {\r\n                    \"txt\": \"\",\r\n                    \"correctans\": false\r\n                }, {\r\n                    \"txt\": \"\",\r\n                    \"correctans\": false\r\n                }, {\r\n                    \"txt\": \"\",\r\n                    \"correctans\": false\r\n                }, {\r\n                    \"txt\": \"\",\r\n                    \"correctans\": false\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    addBlankQuestionToBank() {\r\n        let q = this.state.qBank;\r\n        q.push(this.createQuestionObject());\r\n        this.setState({ qBank: q });\r\n    }\r\n\r\n    setErrorObject(_msg = \"\", _okFunc = \"closeError\", _cancel = false, _cancelFunc = \"\", _theme = \"popup-box-orange\") {\r\n        this.setState({\r\n            error: {\r\n                \"theme\": _theme,\r\n                \"show\": true,\r\n                \"msg\": _msg,\r\n                \"ok\": true,\r\n                \"okFunc\": _okFunc,\r\n                \"cancel\": _cancel,\r\n                \"cancelFunc\": _cancelFunc\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteUnsavedQuestion() {\r\n        let q = this.state.qBank;\r\n        q.pop();\r\n        this.setState({ qBank: q });\r\n    }\r\n\r\n    saveXMLFile(fileName, xmlstr) {\r\n        var file = new Blob([xmlstr], {\r\n            type: 'text/xml'\r\n        });\r\n\r\n        var link = document.createElement(\"a\"); // Or maybe get it from the current document\r\n        link.href = URL.createObjectURL(file);\r\n        link.download = fileName;\r\n        //link.innerHTML = \"Click here to download the file\";\r\n        //document.body.appendChild(link); // Or append it whereever you want\r\n        //window.open(URL.createObjectURL(file)); //opening file in browser \r\n        window.open(link);\r\n        link.click();\r\n    }\r\n\r\n    //.. EVENT CALLS ----------------------------------------------------------------------------\r\n\r\n    onProceed(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        if (this.isFormValid(\"gTitle\") && this.isFormValid(\"gDesc\")) {\r\n            if ((this.state.qBank.length === 0) && (this.state.qBank[0] === undefined)) {\r\n                this.setState({ editGame: true });\r\n                this.addBlankQuestionToBank();\r\n            }\r\n            ChangeComp.stateTo(AppStates.EDIT_QUESTION);\r\n        }\r\n    }\r\n\r\n    onEditTitle() {\r\n        if (!this.isQuestionSetValid(false) && !(this.state.qIndex === 0)) {\r\n            //this.setErrorObject(ErrorMsg.UNSAVED_QUESTION, 'confirmedEditTitle', true, 'closeError');\r\n            this.setErrorObject(ErrorMsg.UNSAVED_QUESTION);\r\n            return\r\n        } //else { \r\n        ChangeComp.stateTo(AppStates.EDIT_TITLE);\r\n        //}\r\n    }\r\n\r\n    onConfirmedEditTitle() {\r\n        /* this.deleteUnsavedQuestion();\r\n        this.onCloseError();\r\n        ChangeComp.stateTo(AppStates.EDIT_TITLE); */\r\n    }\r\n\r\n    onPrev() {\r\n\r\n        /* let qs = this.isQuestionSetValid(true);\r\n\r\n        if (qs) {\r\n            this.setState({\r\n                qIndex: --this.state.qIndex\r\n            });\r\n        } */\r\n\r\n        if (!this.isQuestionSetValid(false)) {\r\n            this.setErrorObject(ErrorMsg.UNSAVED_QUESTION);\r\n            return\r\n        }\r\n\r\n        this.setState({\r\n            qIndex: --this.state.qIndex\r\n        });\r\n    }\r\n\r\n    onConfirmedPrev() {\r\n        /* this.deleteUnsavedQuestion();\r\n        this.onCloseError();\r\n        this.setState({\r\n            qIndex: --this.state.qIndex\r\n        }); */\r\n    }\r\n\r\n    onNext() {\r\n\r\n        if (this.isQuestionSetValid(true)) {\r\n            this.setState({\r\n                qIndex: ++this.state.qIndex\r\n            });\r\n            if (this.state.qIndex === this.state.qBank.length) {\r\n                this.addBlankQuestionToBank();\r\n            }\r\n        }\r\n    }\r\n\r\n    onDeleteQuestion() {\r\n        this.setErrorObject(ErrorMsg.DELETE_QUESTION, 'confirmedDeleteQuestion', true, 'closeError');\r\n    }\r\n\r\n    onConfirmedDeleteQuestion() {\r\n        let new_state = Object.assign({}, this.state);\r\n        ArrayUtil.removeAtIndex(new_state.qBank, new_state.qIndex);\r\n        if (new_state.qIndex !== 0) {\r\n            new_state.qIndex--;\r\n        }\r\n        this.setState(new_state);\r\n        this.onCloseError();\r\n    }\r\n\r\n    onDraft() {\r\n        this.setErrorObject(ErrorMsg.DRAFT_GAME, 'confirmDraft', true, 'closeError', 'popup-box-green');\r\n    }\r\n\r\n    onConfirmDraft() {\r\n        this.onCloseError();\r\n    }\r\n\r\n    onSave() {\r\n\r\n        //console.log(\"qArr-\", this.state.qArr.length, \" qBank-\", this.state.qBank.length, this.isQuestionSetValid(false))\r\n\r\n        let qs = this.isQuestionSetValid(true);\r\n        if (qs) {\r\n\r\n            if (this.state.qBank.length < this.state.qArr.length) {\r\n                this.setErrorObject(ErrorMsg.UNEDITED_QUESTION);\r\n                return\r\n            }\r\n\r\n            if (this.state.qBank.length < GameConst.QUESTIONS_REQUIRED) {\r\n                this.setErrorObject(ErrorMsg.PUBLISH_QUESTION);\r\n                return\r\n            }\r\n            this.setErrorObject(ErrorMsg.PUBLISH_GAME, 'publish', true, 'closeError', 'popup-box-green');\r\n        }\r\n    }\r\n\r\n    onPublish() {\r\n\r\n        this.onCloseError();\r\n\r\n        let xw = new XMLWriter();\r\n\r\n        xw.startDocument();\r\n\r\n        //.. Game Content\r\n        xw.startElement('GameContent');\r\n        xw.writeAttribute('id', 'game-498c6f09-fa75-474b-99d0-9bbfe97c78d6');\r\n        xw.writeAttribute('gameTemplateId', 'GT-cc001-en');\r\n        xw.writeAttribute('skinId', 'bb001');\r\n\r\n        //.. metatdata\r\n        xw.startElement('metadata');\r\n\r\n        xw.startElement('keywords');\r\n        xw.text('Algebraic expressions, polynomials, operations on polynomials, binomial, degree, product, coefficient, expansion, zero');\r\n        xw.endElement();\r\n\r\n\r\n        xw.startElement('title');\r\n        xw.text(this.state.fields.gTitle);\r\n        xw.endElement();\r\n\r\n\r\n        xw.startElement('description');\r\n        xw.text('Completing sentences');\r\n        xw.endElement();\r\n\r\n        xw.startElement('language');\r\n        xw.text('English');\r\n        xw.endElement();\r\n\r\n        xw.startElement('gameRules');\r\n        xw.writeAttribute('teamMode', 'true');\r\n        xw.writeAttribute('timerMode', 'true');\r\n        xw.writeAttribute('passMode', 'false');\r\n        xw.writeAttribute('randamizeQmode', 'false');\r\n        xw.endElement();\r\n\r\n\r\n        xw.startElement('dependent');\r\n        xw.startElement('file');\r\n        xw.writeAttribute('src', ' ');\r\n        xw.endElement();\r\n        xw.endElement();\r\n        xw.endElement();\r\n        //.. end of metadata\r\n\r\n        //.. start of gamedata\r\n        xw.startElement('Gamedata');\r\n        xw.startElement('GameEdge');\r\n        xw.startElement('descriptionTxt');\r\n        xw.writeCData(this.state.fields.gDesc);\r\n        xw.endElement();\r\n\r\n        xw.startElement('game');\r\n        xw.writeAttribute('template', ' ');\r\n        xw.writeAttribute('variation', 'addbubbles');\r\n        xw.startElement('templatesettings');\r\n        xw.endElement();\r\n\r\n\r\n        xw.startElement('questions');\r\n\r\n        //.. add questions\r\n        //console.log(\"qBank \", this.state.qBank);\r\n        this.state.qBank.forEach((el, id) => {\r\n            xw.startElement('question');\r\n            xw.writeAttribute('skill', this.state.fields.skill);\r\n\r\n            //.. qtag\r\n            xw.startElement('qtag');\r\n            xw.writeCData(el.qtag);\r\n            xw.endElement();\r\n\r\n            //.. options\r\n\r\n            el.options.forEach((opt) => {\r\n                //console.log(opt);\r\n                if (opt.txt !== \"\") {\r\n                    xw.startElement('option');\r\n                    if (opt.correctans) {\r\n                        xw.writeAttribute('correctans', 'true');\r\n                    }\r\n                    xw.writeCData(opt.txt);\r\n                    xw.endElement();\r\n                }\r\n            });\r\n\r\n            xw.endElement();\r\n            //console.log(id, el);\r\n        });\r\n\r\n\r\n        xw.endElement();\r\n\r\n        xw.endDocument();\r\n\r\n        this.saveXMLFile(\"cricketchallenge.xml\", xw.toString());\r\n    }\r\n\r\n\r\n    onCloseError() {\r\n        let err = this.state.error;\r\n        err[\"show\"] = false;\r\n        this.setState(err);\r\n    }\r\n\r\n    onError(value) {\r\n        this.setErrorObject(value);\r\n    }\r\n\r\n    onStateTo(value) {\r\n        this.setState({ compState: value });\r\n    }\r\n\r\n    onChangeField(key, value) {\r\n        let fields = this.state.fields;\r\n        fields[key] = value;\r\n        this.setState(fields);\r\n    }\r\n\r\n    onChangeBulkQuestionField(key, value) {\r\n        let new_state = Object.assign({}, this.state);\r\n        new_state.fields = this.state.fields;\r\n        new_state.fields[key] = value;\r\n        new_state.qArr = escape(this.state.fields.qData).split('%0A');\r\n        this.setState(new_state);\r\n    }\r\n\r\n\r\n    onChangeQuestionField(value) {\r\n        let _qbank = this.state.qBank;\r\n        _qbank[this.state.qIndex].qtag = value;\r\n        this.setState(_qbank);\r\n    }\r\n\r\n    onChangeOptionField(index, value) {\r\n        let _qbank = this.state.qBank;\r\n        _qbank[this.state.qIndex].options[index].txt = value;\r\n        this.setState(_qbank);\r\n    }\r\n\r\n    onChangeOptionCorrect(index) {\r\n        let _qbank = this.state.qBank;\r\n        _qbank[this.state.qIndex].options.forEach((opt, id) => {\r\n            opt.correctans = (id === index) ? true : false\r\n        });\r\n        this.setState(_qbank);\r\n    }\r\n\r\n    //.. EVENT CALLS ENDS -----------------------------------------------------------------------\r\n}\r\n\r\n//AppStore.id = 'qBank';\r\n\r\nexport default AppStore;","import React from 'react';\r\nimport { Reflux } from \"../util/Utils\";\r\nimport AppStore from \"../store/AppStore\";\r\nimport { Action, Validation } from \"../actions/AppActions\";\r\n\r\n\r\nclass DefaultView extends Reflux.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.store = AppStore;\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        Validation.changeField(field, e.target.value);\r\n    }\r\n\r\n    handleBulkQuestionChange(field, e) {\r\n        Validation.changeBulkQuestionField(field, e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"container\" id=\"default\">\r\n                <div className=\"game-auth\">\r\n                    <div className=\"top-header\">\r\n                        <h4>Game Authoring - Cricket Challenge</h4>\r\n                    </div>\r\n                    <div className=\"middlecontent\">\r\n                        <div className=\"game-title\">\r\n                            <h4>Game Title</h4>\r\n                            <div className=\"requiredfields\">(Required)</div>\r\n                            <input refs=\"gTitle\" type=\"text\"\r\n                                onChange={this.handleChange.bind(this, \"gTitle\")}\r\n                                value={this.state.fields[\"gTitle\"]} />\r\n                        </div>\r\n                        <div className=\"game-des\">\r\n                            <h4>Game Description</h4>\r\n                            <div className=\"requiredfields\">(Required)</div>\r\n                            <textarea refs=\"gDesc\" type=\"text\"\r\n                                onChange={this.handleChange.bind(this, \"gDesc\")}\r\n                                value={this.state.fields[\"gDesc\"]}\r\n                                rows=\"5\" cols=\"70\">\r\n                            </textarea>\r\n                        </div>\r\n\r\n                        <div className={(this.state.editGame) ? \"hide\" : \"questionblock\"}>\r\n                            <h4>Enter or Copy-Paste all your Questions.</h4>\r\n                            <div className=\"optionalfields\">(Optional)</div>\r\n\r\n                            <div className=\"copypastearea\">\r\n                                <div className=\"num-stepper\">\r\n                                    <ol>\r\n                                        {this.state.qArr.map((opt, idx) => (\r\n                                            <li key={idx}></li>\r\n                                        ))}\r\n                                    </ol>\r\n                                </div>\r\n\r\n                                <textarea type=\"text\" name=\"message\"\r\n                                    onChange={this.handleBulkQuestionChange.bind(this, \"qData\")}\r\n                                    value={this.state.fields[\"qData\"]}\r\n                                    rows=\"5\" cols=\"100\"></textarea>\r\n\r\n                            </div>\r\n\r\n                            <h5>(You can collectively enter all your questions and click Proceed to select the distractors and correct\r\n                                    answer.)</h5>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className=\"footer\">\r\n                        <button className=\"btn\" onClick={(e) => { Action.proceed(e) }}>\r\n                            Proceed &#707;\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DefaultView;\r\n\r\n","import React from 'react';\r\nimport { Reflux } from \"../util/Utils\";\r\nimport AppStore from \"../store/AppStore\";\r\nimport { Action, Validation } from \"../actions/AppActions\";\r\n\r\n\r\nclass EditQuestionView extends Reflux.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.store = AppStore;\r\n    }\r\n\r\n    handleQuestionChange(e) {\r\n        Validation.changeQuestionField(e.target.value);\r\n    }\r\n\r\n    handleSkillChange(field, e) {\r\n        Validation.changeField(field, e.target.value);\r\n    }\r\n\r\n    handleOptionTextChange(id, e) {\r\n        Validation.changeOptionField(id, e.target.value);\r\n    }\r\n\r\n    handleRadioChange(id) {\r\n        Validation.changeOptionCorrect(id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"container\" id=\"editquestion\">\r\n                <div className=\"game-auth-nxtpage\">\r\n                    <div className=\"top-header\">\r\n                        <h4>Game Authoring - Cricket Challenge</h4>\r\n                        <button className=\"btn\" onClick={() => { Action.editTitle() }}>\r\n                            Edit Title &amp; Description\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"section\">\r\n                        <div className=\"left-question-panel\">\r\n                            <p>Question Number: {this.state.qIndex + 1}</p>\r\n                        </div>\r\n                        <div className=\"middlecontent-nxtpage\">\r\n                            <div className=\"game-title\">\r\n                                <h4>Question Stem</h4>\r\n                                <input type=\"text\" onChange={this.handleQuestionChange.bind(this)}\r\n                                    value={this.state.qBank[this.state.qIndex].qtag} />\r\n                            </div>\r\n                            <div className=\"game-des\">\r\n                                <h4>Instruction to Students</h4>\r\n                                <input type=\"text\"\r\n                                    value={this.state.fields.skill}\r\n                                    onChange={this.handleSkillChange.bind(this, \"skill\")} />\r\n                            </div>\r\n                            <div className=\"questionblock\">\r\n                                <h4>Answer Choices</h4>\r\n                                <h5>Please also select one choice as the correct answer, by clicking on <input type=\"radio\" /> next to it.</h5>\r\n                            </div>\r\n\r\n                            <form>\r\n                                <div className=\"answer-option\">\r\n                                    <ul>\r\n                                        {this.state.qBank[this.state.qIndex].options.map((opt, idx) => (\r\n                                            <div key={idx}>\r\n                                                <input type=\"radio\"\r\n                                                    checked={opt.correctans}\r\n                                                    onChange={this.handleRadioChange.bind(this, idx)}\r\n                                                    disabled={(opt.txt === \"\") ? true : false} />\r\n                                                <input type=\"text\"\r\n                                                    value={opt.txt}\r\n                                                    onChange={this.handleOptionTextChange.bind(this, idx)} />\r\n                                            </div>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"footer-nxtpage\">\r\n                        <div className=\"nav-btn\">\r\n                            <button className={(this.state.qIndex === 0) ? \"disabled\" : \"btn\"}\r\n                                onClick={() => { if (this.state.qIndex !== 0) Action.prev() }}>\r\n                                &#706; Previous Question\r\n                            </button>&nbsp;&nbsp;\r\n                            <button className=\"btn\" onClick={() => { Action.next() }}>\r\n                                Next Question &#707;\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"rightsidebtn\">\r\n                            <button className={(this.state.qBank.length > 1) ? \"btn\" : \"hide\"}\r\n                                onClick={() => { Action.deleteQuestion() }}>\r\n                                Delete this Question\r\n                            </button>&nbsp;&nbsp;\r\n\r\n                            <button className=\"btn\" onClick={() => { Action.draft() }}>\r\n                                Save As Draft\r\n                            </button>&nbsp;&nbsp;\r\n                            <button className=\"btn\" onClick={() => { Action.save() }}>\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditQuestionView;","import React from 'react';\r\nimport { Reflux } from \"../util/Utils\";\r\nimport AppStore from \"../store/AppStore\";\r\nimport { Action } from \"../actions/AppActions\";\r\n\r\nclass ErrorView extends Reflux.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.store = AppStore;\r\n    }\r\n\r\n    okClick(e) {\r\n        //console.log(\"ok clicked \", this.state.error.okFunc);\r\n        Action[this.state.error.okFunc]();\r\n    }\r\n\r\n    cancelClick(e) {\r\n        //console.log(\"cancel clicked\");\r\n        Action[this.state.error.cancelFunc]();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error.show) {\r\n            return (\r\n                <div className=\"popup-window\">\r\n                    <div className={this.state.error.theme}>\r\n                        <h5>{this.state.error.msg}</h5>\r\n                        <div className=\"bottom-btn\">\r\n                            <button className=\"okbtn\" onClick={this.okClick.bind(this)}>\r\n                                Ok\r\n                            </button>\r\n                            <button className={(this.state.error.cancel) ? \"cancelbtn\" : \"hide\"}\r\n                                onClick={this.cancelClick.bind(this)}>\r\n                                Cancel\r\n                            </button>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorView;","import React from 'react';\n\nimport AppStates from \"./constants/AppStates\";\nimport AppStore from \"./store/AppStore\";\n\nimport DefaultView from \"./components/DefaultView\";\nimport EditQuestionView from \"./components/EditQuestionView\";\nimport ErrorView from './components/ErrorView';\n\nvar Reflux = require('reflux');\n\nclass App extends Reflux.Component {\n\n  constructor(props) {\n    super(props);\n    this.store = AppStore;\n  }\n\n  getComponent() {\n\n    let comp;\n\n    switch (this.state.compState) {\n      case AppStates.EDIT_TITLE:\n        comp = <DefaultView />\n        break;\n\n      case AppStates.EDIT_QUESTION:\n        comp = <EditQuestionView />\n        break;\n\n      default:\n        comp = <DefaultView />\n    }\n    return comp\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <div><p>Currently using React<code>{React.version} and ENV is {process.env.NODE_ENV}</code>.</p></div> */}\n        <div>{this.getComponent()}</div>\n        <ErrorView />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}